App Game Mata Mosquito

1º parte : A primeira parte consiste em definir o tamanho do palco do jogo, ou seja, definir os limites da tela do jogo, cuidando para não passar do limite de visão da tela.
 para isso vamos usar o objeto (BOM window) para isso criamos duas variáveis, uma de altura e outra de largura com o valor 0, após isso criamos a função que chamei de ajustaTamanhoPalcoJogo, mas é o nome não é importante, então chamamos as variáveis para dentro da função e usamos os códigos window.innerHeight (altura) e window.innerWidth (largura) para detectarmos o tamanho da tela. Por fim adicionamos o evento (onresize="ajustaTamanhoPalcoJogo()") dentro da tag html (body) para que assim quando ajustarmos a tela seja detectado na hora.

2º parte: Consiste em criar as posições aleatórias dos mosquitos na tela.
   para isso criamos duas variáveis da posição X e Y, em seguida usamos o método Math.random() para criar valores randômicos, para não ocorrer o erro de mosquitos sairem da tela multiplicamos o valor X pela largura e a posição Y pela altura, como ajuste usamos o método Math.floor() para arrendondar os valores para baixo e também diminuímos 90px da posição X e Y para que não ocorra nenhum erro de metado do mosquito ficar para fora da tela, pois o ponto de ancoragem é o lado superior esquerdo. Criamos um operador ternário que fará com que quando a posição X ou Y for menor que 0 ele recebe 0 para que não saia da tela.

3º parte: consiste em criar o elemento HTML.
   para isso criamos uma variável com o método DOM (document.create.Element('img') para criar uma imagem, após isso usamos o método mosquito.src='' para recuperarmos a imagem, após isso usamos o código mosquito.style.left = posicaoX + 'px' para que a posição randômica vire em pixel e fazemos a mesma coisa para posicaoY, para funcionar a imagem precisa estar em posição absoluta então usamos mosquito.style.position = 'absolute', e para incluir essa imagem detro do body do HTML usamos document.body.appendChild(mosquito).

4º parte: Consiste em criar tamanhos aleatórios.
  para isso criamos uma classe e usamos o método Math.random() para usar valores aleatórios para decidir a classe de tamanho do mosquito. multiplicamos por 3 e usamos o Math.floor() para arredondar o valor, após isso criamos as classes de tamanhos no css apenas com largura e altura definidas. Então para finalizar usamos um switch para decidir a classe.

5º parte: Consiste em criar lados aleatórios, ou seja, de forma aleatória ele virar para o lado esquerdo ou direito.
 para isso criamos uma função que chamei de ladoAleatorio(), após isso criei uma variável que dentro dela contém um Math.random() multiplicado por 2 para que só haja 2 parâmetros, após isso criei um switch que retorna lado a ou b então criei as classes no css lado a e b, o ladoA contem o código transform:scaleX(1) para virar a imagem para a direita e no ladoB contém transform:scaleX(-1) para virar a imagem para a direita. para fazer tudo funcionar chamei a função dentro da função posicaoRandomica() então dentro da função concatenei no mosquito.classname a função ladoAleatorio() junto da função tamanhoAleatorio(), uma OBS é precisa criar um espaço entre as funções para que não haja concatenação errada então fica mosquito.className = tamanhoAleatorio() + '' + ladoAleatorio().

6º parte: Consiste em fazer os mosquitos aparecerem e desaparecerem em um intervalo de tempo.
 para isso começamos fazendo-os aparecerem após um determinado tempo, começamos no script da página html criando um setInterval() para que dentro de um espaço de tempo ele apareça, então fica setInterval(function() { posicaoRandomica()}, 1000) isso quer dizer que a função posição randômica vai aparecer a cada 1000 milissegundos (1 segundo). O proximo passo é criar um ID pro mosquito para ver se ele ja existe e se existe ser excluido, para isso vamos na criação do elemento html e usamos o código mosquito.id = 'mos	quito' , após isso vamos no início da função posicaoRandomica() e criamos um if para ver se ele ja existe e se existir irá exclui-lo, fica assim if(document.getElementById('mosquito'){document.getElementById('mosquito').remove()}, usamos o DOM para recuperar o ID e usamos o objeto remove() para remove-lo.

7º parte: Consiste em criar os elementos de cenário.
 para começar vamos ciar 3 divs uma com a classe painel que é onde fica as vidas e o cronômetro, no css vamos chamar a classe painel e configurar posição absoluta, largura de 190px, padding de 10px, bottom de 0px, left de 0px, uma borda solida de 1px branca e um background color branco e pra finalizar 0.7 de opacidade. Então criamos a div com a classe vida 
e adicionamos 3 imagens 2 com coração cheio e uma com vazio e no css apenas colocamos o float left, no cronômetro configuramos float left, tamanho da fonte de 20 e em negrito.

8º parte: Consiste em controlar os pontos de vida.
 para começar vamos nas imagens de coração de vida no html e adicionamos ids de v1, v2 e v3, após isso vamos na criação do elemento html no js e colocamos o onclick para que quando clicado ele seja removido e nada aconteça então fica mosquito.onclick= function(){this.remove}, o elemento this remete ao próprio elemento. então agora vamos no bloco if que criamos a lógica para remover o mosquito para que quando o mosquito for removido sem ser clicado perca 1 ponto de vida, para isso criamos uma variável fora do if, dei o name de vidas com o valor 1, após isso dentro do if usamos o DOM para trocar os corações cheios por vazios então fica document.getElementById('v' + vidas).src="url do coração vazio" o método src usamos para recuperar as imagens do repositório, então usamos uma soma de vidas para que contabilize as vidas perdidas então fica vidas++, para que não haja erros precisamos parar o script quando for perdido a 3º vida, pois significa que você perdeu, para isso usamos outro if dentro do if esse if impõe a condição de que se a variável vidas for maior que 3 a lógica é interrompida, e usamos um else encapsulando a lógica da troca de corações e o vidas++.

9º parte: Consiste em criar a página de game over.
  para isso vamos voltar no if que interrompe o script quando passa de 3 vidas, após isso vamos usar o objeto window.location.href = 'fim_de_jogo.htmll', temos que criar uma página html com esse nome e após isso na página de fim de jogo atribuir a nossa folha de estilo e atribuir o bootstrap para estilizar o botão, no body criamos algumas divs uma com a classe container, dentro dela uma com a classe linha, dentro dela uma com a classe coluna e por fim uma div contendo uma tag img com a imagem de game over, dentro dessa div da imagem usamos a classe d-flex justify-content-center para centralizar a imagem usando bootstrap. O botão vamos copiar a estrutura de cima porém ainda dentro do container, trocamos a tag img por uma tag button com a classe btn btn-dark e btn-lg para estilizar o botão e usamos o onclick com o objeto window.location.href='index.hmtl' para voltar para o jogo.

10º parte: Consiste em criar o cronômetro.
  para isso vamos criar uma variável cronometro com valor que você desejar o tempo para exemplo vou atribuir 15, após isso vou criar uma variável dentro do AjustaTamanhoPalcoJogo(), essa variável denominei cronometro e atribui um setInterval junto de uma função cuja consistem em tempo-=1 para dimuinuir 1 número por vez e contém um if onde a condição diz que se o tempo for menor que 0 para o cronômetro e a criação de mosquitos, para parar o cronômetro usamos o clearInterval(cronometro) para limpar do histórico essa função, para a criação de mosquito usamos o clearInterval(criaMosquito), para funcionar esse código do mosquito temos que ir no index e no script do setInterval da criação de mosquito adicionar a criação de uma variável neste setInterval.

11º parte: Consiste em crir a página de vitória.
  para isso começamos configurando o redirecionamento, dentro do if do cronômetro usamos o objeto window.location.href='vitoria.html', após isso criamos a página html e copiamos o código da página game over e trocamos a imagem para a imagem de você venceu.


